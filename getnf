#!/usr/bin/env bash
#
# getNF: A Better way to install NerdFonts
#
# Author: @ronniedroid
# Maintainer: @trimclain
# License: GPL-3.0

# shellcheck disable=SC2164,SC2155
# Disabled:
# "Declare and assign separately to avoid masking return values": https://github.com/koalaman/shellcheck/wiki/SC2155
# "Use 'pushd ... || exit' or 'pushd ... || exit' in case pushd fails": https://github.com/koalaman/shellcheck/wiki/SC2164

ON_MAC='false'
if [[ $(uname) == "Darwin" ]]; then
    ON_MAC='true'
fi
readonly ON_MAC

readonly NERDFONTSAPI='https://api.github.com/repos/ryanoasis/nerd-fonts'
readonly NERDFONTSREPO='https://github.com/ryanoasis/nerd-fonts'

DIST_DIR="$HOME/.local/share/fonts"
if [[ "$ON_MAC" == "true" ]]; then
    DIST_DIR="$HOME/Library/Fonts"
fi
readonly DIST_DIR

DOWN_DIR="$HOME/Downloads/getnf"
if command -v xdg-user-dir > /dev/null; then
    DOWN_DIR="$(xdg-user-dir DOWNLOAD)/getnf"
fi
readonly DOWN_DIR

readonly GETNF_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/getnf"
readonly FONT_RELEASES_DIR="$GETNF_DIR/releases"
readonly RELEASE_FILE="$GETNF_DIR/release.txt"
readonly ALL_FONTS_FILE="$GETNF_DIR/all_fonts.txt"

NEW_RELEASE_AVAILABLE='false'
ANY_FONTS_INSTALLED='false'
KEEP_FONT_ARCHIVES='false'
FORCE_FONT_UPDATE='false'

if command -v tput > /dev/null; then
    # tput is part of the ncurses package
    # Colors: https://www.ditig.com/publications/256-colors-cheat-sheet
    readonly RED=$(tput setaf 9)
    readonly GREEN=$(tput setaf 2)
    readonly TEAL=$(tput setaf 6)
    readonly RESET=$(tput sgr0)
fi

show_help() {
    cat << EOF
getNF: A Better way to install NerdFonts

Usage:
  getnf [options]

OPTIONS:
  -h          print this help message and exit
  -f          force reinstall an already installed font
  -k          keep the downloaded font archives
  -i <font>   directly install the specified fonts
  -r <font>   uninstall the specified fonts
  -u          updates getNF to the latest version

To install fonts using the menu:
- Choose one or more fonts (by index/number) to install
- Hit Return/Enter to install the selected fonts
- Type 'q' to quit

To install fonts directly:
- Get the exact name of a font from the menu
- Use 'getnf -i "<font-name>"' to install a font
- Use 'getnf -i "<name1>,<name2>"' to install multiple fonts

To uninstall fonts use the same syntax as for direct install.
EOF
}

info() {
    printf "%s\n" "$1"
}

title() {
    printf "\n${TEAL}%b${RESET}\n" "$1"
}

confirm() {
    printf "${GREEN}%b${RESET}\n" "$1"
}

alert() {
    printf "${RED}%b${RESET}\n" "$1"
}

error() {
    alert "$1" >&2
    exit 1
}

ensure_installed() {
    if ! command -v "$1" > /dev/null; then
        error "Dependency $1 is not installed on your system."
    fi
}

create_dir() {
    if [[ -d "$1" ]]; then
        info "$2 directory exists, good."
    else
        mkdir -p "$1"
        confirm "Created the $2 directory."
    fi
}

verify_internet_access() {
    if ! curl --silent --head --fail "$NERDFONTSAPI" > /dev/null; then
        alert "Couldn't connect to the NerdFont API." >&2
        error "Most likely the internet connection is not working."
    fi
}

check_dependencies() {
    ensure_installed curl
    if [[ "$ON_MAC" == "false" ]]; then
        ensure_installed fc-cache
    fi
    verify_internet_access
    create_dir "$DIST_DIR" "Fonts"
    create_dir "$DOWN_DIR" "Fonts Download"
    [[ -d "$FONT_RELEASES_DIR" ]] || mkdir -p "$FONT_RELEASES_DIR"
}

###############################################################################
# Animation Functions
# Credit: https://github.com/Silejonu/bash_loading_animations
#
# Usage:
# Run `stop_loading_animation` if the script is interrupted:
#trap stop_loading_animation SIGINT
# Show a loading animation for the command "foo"
#start_loading_animation
#foo
#stop_loading_animation
# Don't forget to redirect the output from "foo"
#######################################
readonly ANIMATION=('-' "\\" '|' '/')
readonly FRAME_INTERVAL=0.25
# BOX=( ┤ ┴ ├ ┬ )
# BOX_INTERVAL=0.2

play_loading_animation_loop() {
    while true; do
        # for frame in "${BOX[@]}" ; do
        for frame in "${ANIMATION[@]}"; do
            printf "\033[1D\033[K"
            printf "%s" "${frame}"
            # sleep "$BOX_INTERVAL"
            sleep "$FRAME_INTERVAL"
        done
    done
}

start_loading_animation() {
    unset "BLA_active_loading_animation[0]"
    if command -v tput > /dev/null; then
        tput civis # Hide the terminal cursor
    fi
    play_loading_animation_loop &
    LOADING_ANIMATION_PID="${!}"
}

stop_loading_animation() {
    # printf "\033[1A\033[2K" # Move up a line and erase
    # Move left one char and erase
    printf "\033[1D\033[K"
    kill "${LOADING_ANIMATION_PID}" &> /dev/null
    if command -v tput > /dev/null; then
        tput cnorm # Restore the terminal cursor
    fi
}
###############################################################################

#######################################
# Create the global RELEASE with the latest release version and
# save it in the RELEASE_FILE. If there's a new release available,
# set NEW_RELEASE_AVAILABLE to true.
# Globals:
#   NERDFONTSAPI
#   RELEASE_FILE
#   NEW_RELEASE_AVAILABLE
# Arguments:
#   None
#######################################
get_latest_release_version() {
    RELEASE=$(curl --silent "$NERDFONTSAPI/releases/latest" |
        awk -v RS=',' -F'"' '/tag_name/ {print $4}')
    if [[ -f "$RELEASE_FILE" ]]; then
        local current_release=$(cat "$RELEASE_FILE")
        if [[ "$current_release" != "$RELEASE" ]]; then
            NEW_RELEASE_AVAILABLE='true'
        fi
    fi
    echo "$RELEASE" > "$RELEASE_FILE"
}

#######################################
# Check if the font version is saved and is the latest
# Globals:
#   FONT_RELEASES_DIR
#   RELEASE
# Arguments:
#   Font name
# Returns:
#   0 if font is of the latest version, 1 otherwise
#######################################
is_latest_version() {
    local font_release_file="$FONT_RELEASES_DIR/${1}_release.txt"
    if [[ -f "$font_release_file" ]]; then
        local font_release_version=$(cat "$font_release_file")
        if [[ "$font_release_version" == "$RELEASE" ]]; then
            return 0
        fi
    fi
    return 1
}

#######################################
# Create a local file with all fonts from the NerdFonts repo.
# We can do this since the list doesn't change often.
# Globals:
#   NERDFONTSAPI
# Arguments:
#   None
#######################################
create_all_fonts_file() {
    local font_list
    font_list=$(curl -s "$NERDFONTSAPI/contents/patched-fonts?ref=master" |
        awk -v RS=',' -F'"' '/name/ {print $4}')
    echo "$font_list" > "$ALL_FONTS_FILE"
}

#######################################
# Create the global array ALL_FONTS with all fonts from the NerdFonts repo
# Globals:
#   ALL_FONTS_FILE
# Arguments:
#   None
#######################################
get_all_fonts() {
    if [[ ! -f "$ALL_FONTS_FILE" || "$NEW_RELEASE_AVAILABLE" == "true" ]]; then
        create_all_fonts_file
    fi
    ALL_FONTS=()
    #mapfile -t ALL_FONTS < "$ALL_FONTS_FILE" # not available on mac
    while IFS= read -r line; do
        ALL_FONTS+=("$line")
    done < "$ALL_FONTS_FILE"
}

#######################################
# Create the global array INSTALLED_FONTS
# Globals:
#   DIST_DIR
#   ALL_FONTS
# Arguments:
#   None
#######################################
get_installed_fonts() {
    # list all fonts in DIST_DIR
    local installed_user_fonts=("$DIST_DIR"/*)
    # leave only the basenames
    installed_user_fonts=("${installed_user_fonts[@]##*/}")

    # filter NerdFonts
    INSTALLED_FONTS=()
    for font in "${ALL_FONTS[@]}"; do
        if [[ " ${installed_user_fonts[*]} " == *" $font "* ]]; then
            INSTALLED_FONTS+=("$font")
        fi
    done
}

#######################################
# Create the global FONT_OPTIONS array by removing installed fonts
# from the list of all fonts if they are from current release
# or if the user does not want to force the update
# Globals:
#   FORCE_FONT_UPDATE
#   ALL_FONTS
#   INSTALLED_FONTS
# Arguments:
#   None
#######################################
filter_installed_fonts() {
    if [[ "$FORCE_FONT_UPDATE" == "false" ]]; then
        FONT_OPTIONS=()
        for font in "${ALL_FONTS[@]}"; do
            # add the font even if it's installed but <fontname>_release.txt doesn't exists
            if [[ " ${INSTALLED_FONTS[*]} " != *" $font "* ]] || ! is_latest_version "$font"; then
                FONT_OPTIONS+=("$font")
            fi
        done
    else
        FONT_OPTIONS=("${ALL_FONTS[@]}")
    fi
}

#######################################
# Download the font archive
# Globals:
#   NERDFONTSREPO
#   RELEASE
# Arguments:
#   Font name
#######################################
download_font() {
    echo -n "Downloading $1...  "
    local curl_options=("--silent" "--location" "--remote-header-name" "--remote-name")
    trap stop_loading_animation SIGINT
    start_loading_animation
    curl "${curl_options[@]}" "$NERDFONTSREPO/releases/download/$RELEASE/$1.tar.xz"
    stop_loading_animation
    confirm "Done"
}

#######################################
# Extract the font archive to the user fonts directory
# Globals:
#   DIST_DIR
# Arguments:
#   Font name
#######################################
extract_font() {
    echo -n "Installing $1... "
    mkdir -p "$DIST_DIR/$1"
    tar -xf "$1.tar.xz" -C "$DIST_DIR/$1"
    confirm "Done"
}

#######################################
# Save the release version of the given font
# Globals:
#   RELEASE
#   FONT_RELEASES_DIR
# Arguments:
#   Font name
#######################################
save_font_release() {
    echo "$RELEASE" > "$FONT_RELEASES_DIR/${1}_release.txt"
}

#######################################
# Remove the downloaded font archives
# Globals:
#   DOWN_DIR
#   SELECTED_FONTS
# Arguments:
#   None
#######################################
remove_font_archives() {
    echo -n "Removing downloaded font archives... "
    for font in "${SELECTED_FONTS[@]}"; do
        rm -f "$DOWN_DIR/$font.tar.xz"
    done
    confirm "Done"
}

#######################################
# Build font information cache files
# Arguments:
#   None
#######################################
update_font_cache() {
    if [[ "$ON_MAC" == "false" ]]; then
        echo -n "Updating font cache... "
        fc-cache &> /dev/null
        confirm "Done"
    fi
}

#######################################
# Install the selected font
# Globals:
#   DOWN_DIR
#   INSTALLED_FONTS_FILE
#   ANY_FONTS_INSTALLED
# Arguments:
#   Font name
#######################################
install_font() {
    pushd "$DOWN_DIR" > /dev/null
    # Remove the archive if it exists due to curl not having overwrite option
    rm -f "$DOWN_DIR/$1.tar.xz"
    download_font "$1" &&
        extract_font "$1" &&
        save_font_release "$1"
    ANY_FONTS_INSTALLED='true'
    popd > /dev/null
}

#######################################
# Check if the font is a NerdFont by checking if the URL exists
# Globals:
#   NERDFONTSREPO
#   RELEASE
# Arguments:
#   Font name
# Returns:
#   0 if font url exists, 1 otherwise
#######################################
font_url_exists() {
    local url="$NERDFONTSREPO/releases/download/$RELEASE/$1.tar.xz"
    curl --output /dev/null --silent --head --fail "$url" && return 0
    return 1
}

#######################################
# Parse the string of font names and add them
# to SELECTED_FONTS if all of them are valid
# Globals:
#   SELECTED_FONTS
# Arguments:
#   String of font names
#######################################
direct_install() {
    for font_name in $(echo "$1" | tr ',' ' '); do
        if font_url_exists "$font_name"; then
            SELECTED_FONTS+=("$font_name")
        else
            error "Invalid font name: $font_name. Try again."
        fi
    done
}

#######################################
# Parse the string of font names and uninstall them if they are installed
# Globals:
#   DIST_DIR
#   FONT_RELEASES_DIR
# Arguments:
#   String of font names
#######################################
uninstall_fonts() {
    local -a fonts_to_uninstall
    for font_name in $(echo "$1" | tr ',' ' '); do
        if [[ -d "$DIST_DIR/$font_name" ]]; then
            fonts_to_uninstall+=("$font_name")
        else
            error "Font $font_name is not installed."
        fi
    done
    if [[ ${#fonts_to_uninstall[@]} -ne 0 ]]; then
        for font in "${fonts_to_uninstall[@]}"; do
            echo -n "Uninstalling $font... "
            rm -rf "${DIST_DIR:?}/$font"
            rm -f "$FONT_RELEASES_DIR/${font}_release.txt"
            confirm "Done"
        done
        update_font_cache
    fi
}

#######################################
# Updates getnf to the latest version
# Arguments:
#   None
#######################################
update_to_latest_version() {
    echo "Updating getNF..."
    curl -fsSL https://raw.githubusercontent.com/getnf/getnf/main/install.sh | bash
}

#######################################
# Update the font cache and remove font archives unless specified otherwise
# Globals:
#   KEEP_FONT_ARCHIVES
# Arguments:
#   None
#######################################
post_install() {
    update_font_cache
    if [[ "$KEEP_FONT_ARCHIVES" == "false" ]]; then
        remove_font_archives
    else
        info "The downloaded font archives can be found in $DOWN_DIR"
    fi
    confirm "Enjoy your new fonts!"
}

#######################################
# Display installed fonts
# Globals:
#   INSTALLED_FONTS
#   FONT_RELEASES_DIR
# Arguments:
#   None
#######################################
display_installed_fonts() {
    if [[ ${#INSTALLED_FONTS[@]} -ne 0 ]]; then
        title "Installed NerdFonts:"
        for font in "${INSTALLED_FONTS[@]}"; do
            local font_release_file="$FONT_RELEASES_DIR/${font}_release.txt"
            if [[ -f "$font_release_file" ]]; then
                local font_release_version=$(cat "$font_release_file")
                printf "%s - %s\n" "$font" "$font_release_version"
            else
                printf "%s - unknown version\n" "$font"
            fi
        done
    fi
}

#######################################
# Display the font menu
# Globals:
#   RELEASE
#   FONT_OPTIONS
# Arguments:
#   None
#######################################
display_font_menu() {
    local term_width=$(stty size | cut -d ' ' -f 2)
    title "NerdFonts ${RELEASE}:"
    (
        for i in "${!FONT_OPTIONS[@]}"; do
            printf "%d) %s\n" "$((i + 1))" "${FONT_OPTIONS[$i]}"
        done
        printf "q) Quit\n"
    ) | pr -3 -t -w "$term_width"
}

#######################################
# Parse input range of format *-* (e.g. 1-3) and
# add the selected fonts to SELECTED_FONTS array
# Globals:
#   FONT_OPTIONS
#   SELECTED_FONTS
# Arguments:
#   None
# Returns:
#   1 if input format is invalid or if the option is out of range
#######################################
parse_range() {
    if ! [[ $1 =~ ^[0-9]+-[0-9]+$ ]]; then
        alert "Invalid input format: $1. Expected format: X-Y."
        return 1
    fi
    local -a range
    IFS='-' read -ra range <<< "$1"
    local range_start=${range[0]}
    local range_end=${range[1]}
    for ((i = range_start; i <= range_end; i++)); do
        local index=$((i - 1))
        if ((index >= 0 && index < ${#FONT_OPTIONS[@]})); then
            SELECTED_FONTS[index]=${FONT_OPTIONS[index]}
        else
            alert "Invalid option: $i. Try again."
            return 1
        fi
    done
}

#######################################
# Get and parse user input and add the selected fonts to SELECTED_FONTS array
# Globals:
#   FONT_OPTIONS
#   SELECTED_FONTS
# Arguments:
#   None
#######################################
handle_user_input() {
    while true; do
        local choices
        read -rp "Enter font number(s) (e.g. 1,2,3 or 1-3 or 1,3-5): " choices
        for choice in $(echo "$choices" | tr ',' ' '); do
            if [[ $choice == "q" ]]; then
                confirm "Goodbye!"
                exit
            # Choice is a range (e.g. 1-3)
            elif [[ $choice == *-* ]]; then
                parse_range "$choice" || continue 2
            elif ((choice >= 1 && choice <= ${#FONT_OPTIONS[@]})); then
                local index=$((choice - 1))
                SELECTED_FONTS[index]=${FONT_OPTIONS[index]}
            else
                alert "Invalid option: $choice. Try again."
                continue 2
            fi
        done
        title "Selected NerdFonts: ${SELECTED_FONTS[*]}"
        break
    done
}

#######################################
# Run the nerd font installation menu
# Arguments:
#   None
#######################################
menu_install() {
    get_all_fonts
    get_installed_fonts
    filter_installed_fonts

    display_installed_fonts
    display_font_menu
    handle_user_input
}

main() {
    while getopts ":hkfuir:" option; do
        case "${option}" in
            h) show_help && exit 0 ;;
            k) KEEP_FONT_ARCHIVES='true' ;;
            f) FORCE_FONT_UPDATE='true' ;;
            u) UPDATE_TO_LATEST='true' ;;
            i) FONTNAMES="$OPTARG" ;;
            r) UNINSTALL_FONTS="$OPTARG" ;;
            :) error "Option '-$OPTARG' requires at least one font name." ;;
            *) show_help && exit 0 ;;
        esac
    done
    shift $((OPTIND - 1))
    readonly KEEP_FONT_ARCHIVES
    readonly FORCE_FONT_UPDATE

    if [[ -n "$UNINSTALL_FONTS" ]]; then
        uninstall_fonts "$UNINSTALL_FONTS"
        exit
    fi

    if [[ "$UPDATE_TO_LATEST" == "true" ]]; then
        update_to_latest_version
        exit
    fi

    check_dependencies
    get_latest_release_version

    SELECTED_FONTS=()
    if [[ -n "$FONTNAMES" ]]; then
        direct_install "$FONTNAMES"
    else
        menu_install
    fi

    if ((${#SELECTED_FONTS[@]} > 0)); then
        for i in "${SELECTED_FONTS[@]}"; do
            install_font "$i"
        done
    else
        error "No fonts were selected, exiting."
    fi

    if [[ "$ANY_FONTS_INSTALLED" == "true" ]]; then
        post_install
    fi
}

main "$@"
